name: Main workflow
on:
  push:
    branches:
      - main
env:
  WORKSPACE: /home/frontend
  PROJECT_NAME: folio
jobs:
  deploy:
    name: Deploy
    runs-on: self-hosted
    steps:
      - name: If Not Found Clone
        run: |
          echo "Checking if project exists in workspace..."

          if [ ! -d "$WORKSPACE/$PROJECT_NAME" ]; then
            echo "Project not found. Cloning repository..."
            mkdir -p "$WORKSPACE/$PROJECT_NAME"
            cd "$WORKSPACE"
            git clone https://${{ secrets.GH_TOKEN }}@github.com/trungthanh12081997/$PROJECT_NAME.git 
            echo "Repository cloned successfully."
          else
            echo "Project already exists. Skipping clone."
          fi
        shell: bash
        env:
          WORKSPACE: /home/frontend
          PROJECT_NAME: folio
      - name: Get Project Name
        id: get_project
        run: |
          echo "Checking for deployment keyword in commit message..."
          if [[ "${{github.event.head_commit.message}}" =~ \[cd-(.*)\] ]]; then
            echo "Found deployment keyword. Project: ${BASH_REMATCH[1]}"
            echo "::set-output name=project::${BASH_REMATCH[1]}"
          else
            echo "No deployment keyword found in commit message."
            echo "::set-output name=project::null"
          fi

      - name: Deploy
        run: |
          echo "Starting deployment process..."
          echo "Detected project: ${{ steps.get_project.outputs.project }}"
          if [[ "${{ steps.get_project.outputs.project }}" != "null" ]]; then
              echo "Deploying ${{ steps.get_project.outputs.project }}"
              cd $WORKSPACE/$PROJECT_NAME
              git config credential.helper '!f() { sleep 1; echo "username=${{ secrets.GH_USER }}"; echo "password=${{ secrets.GH_TOKEN }}"; }; f'
              git checkout main
              git pull
              echo "Checking if container exists..."
              docker-compose down 
              echo "Starting new container..."
              docker-compose -f docker-compose.yml up -d ${{ steps.get_project.outputs.project }}
          else
              echo "No project to deploy"
          fi
